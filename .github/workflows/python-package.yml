# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python package

on: [push, pull_request]
#  push:
#    branches: [ "main" ]
#  pull_request:
#    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Not supported by the following versions: "3.9", 
        python-version: ["3.10", "3.13"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Install ffmpeg
      run: |
        ci/linux/install_ffmpeg.sh
    - name: Install mkvtoolnix
      run: |
        ci/linux/install_mkvtoolnix.sh
    - name: Set environment variables
      run: |
        echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
        echo "PYTHONPATH=$GITHUB_WORKSPACE:$PYTHONPATH" >> $GITHUB_ENV
        python -c "import os; print('GIT_REPOSITORY=' + os.path.split(os.getenv('GITHUB_REPOSITORY'))[1]);" >> $GITHUB_ENV
        python -c "import os; print('GIT_BRANCH=' + os.path.split(os.getenv('GITHUB_REF'))[1]);" >> $GITHUB_ENV

        python --version>/tmp/python-version.txt
        sed -i -e 's/Python /PYTHON_VERSION=/g' /tmp/python-version.txt  
        sed -i -e 's/\.[0-9]\{1,3\}$//' /tmp/python-version.txt
        cat /tmp/python-version.txt >> $GITHUB_ENV
    - name: List environment variables
      run: |
        env
    - name: List important file locations
      run: |
        find /usr /bin -name sh
        echo
        find /usr /bin -name bash
        echo
        find /usr /bin -name chmod
        echo
        find /usr /bin -name curl
        echo
    - name: Generating medias
      run: |
        echo PYTHONPATH=$PYTHONPATH
        python tools/generate_medias/generate_medias.py
    - name: Test with pytest (with code coverage)
      id: unit_tests
      run: |
        ci/linux/codecoverage.sh
    - name: Making badges
      run: |
        python ci/linux/make-badge-for-tests.py unittests.xml
        python ci/linux/make-badge-for-coverage.py coverage.xml
    - name: Deploy test badge to gist
      if: success() || steps.unit_tests.conclusion == 'failure'
      #uses: exuanbo/actions-deploy-gist@v1
      uses: end2endzone/actions-deploy-gist@main
      with:
        token: ${{ secrets.BADGES }}
        gist_id: 58cf6c72c08e706335337d5ef9ca48e8
        gist_file_name: ${{env.GIT_REPOSITORY}}.${{env.GIT_BRANCH}}.${{env.PYTHON_VERSION}}-tests.json
        file_path: ./unittests.json
    - name: Deploy test badge to gist
      if: success() || steps.unit_tests.conclusion == 'failure'
      #uses: exuanbo/actions-deploy-gist@v1
      uses: end2endzone/actions-deploy-gist@main
      with:
        token: ${{ secrets.BADGES }}
        gist_id: 58cf6c72c08e706335337d5ef9ca48e8
        gist_file_name: ${{env.GIT_REPOSITORY}}.${{env.GIT_BRANCH}}.${{env.PYTHON_VERSION}}-coverage.json
        file_path: ./coverage.json
